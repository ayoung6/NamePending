LinkedList = λ(){
  ll = __Node('__Head__');
  return ll;
};

__Node = λ(value){
  return [value, null];
};

__IsEmpty = lambda(ll){
  return ll[1] == null;
};

RemoveNodeAt = λ(ll, link){
  return if (__IsEmpty(ll) == false) then{
    return let delve(next = ll[1], i = 0){
      if ((i + 1) < link) then{
        delve(next[1], (i + 1));
      } else {
        removed = next[1];
        next[1] = removed[1];
        return removed[0];
      };
    };
  };
};

GetValAt = λ(ll, link){
  return if (__IsEmpty(ll) == false) then{
    return let delve(next = ll[1], i = 0){
      if (i < link) then{
        delve(next[1], (i + 1));
      } else {
        return next[0];
      };
    };
  };
};

AddToHead = λ(ll, value){
  node = __Node(value);
  node[1] = ll[1];
  ll[1] = node;
  return ll;
};

PrintLinkedList = λ(ll){
  if (ll[1] != null) then {
    let delve(link = ll[1]){
      print(link[0]);
      if (link[1] != null) then {
        print(" -> ");
        delve(link[1]);
      };
    };
  println();
  };
};